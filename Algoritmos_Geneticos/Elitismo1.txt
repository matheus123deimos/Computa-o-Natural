def adaptar(self):
            L = []
            Fator_Elite = int(self.getSize()*(1-self.El/100))
            Prob_Esco = (self.getPDC()/100)
            for _ in range(Fator_Elite):
                C1 = choice(self.getPop())
                C2 = choice(self.getPop())
                r = randint(0,100)/100
                if(r<=Prob_Esco):
                    L.append(max(C1,C2))
                else:
                    L.append(min(C1,C2))

            return L             
       #Seleção Adaptada a Neuroevolução
        def selecao(self):
            Mutation = self.getPop()[0].getMut()
            Fator_Elite = int(self.getSize()*(1-self.El/100))
            
            lista1 = []
            lista2 = list(self.getPop())
            lista2.sort()
            lista2 = lista2[Fator_Elite:len(lista2)]
            lista = self.adaptar()
            
            
            for _ in range(int(len(lista)/2)):
                x = choice(lista)
                y = choice(lista)
                cx,cy = x.cross(y)
                Cx = Cromossomo(self.getGene(),self.getMX(),cx)
                Cy = Cromossomo(self.getGene(),self.getMX(),cy)
                lista1.append(Cx)
                lista1.append(Cy)

            lista2 += lista1
            shuffle(lista2)
            self.populacao = lista2
            self.setGer(self.getGer()+1)