class Gene(object):
    #Construtor para Genes Discretos
    def __init__(self,EG = (),IR = ()):
        self.EG = EG
        self.IR = IR#

    #Construtor para Neuroevolução
    @classmethod#
    def Neuro_Gene(cls,Ident_Cam):
        IR = Ident_Cam
        return cls((),IR)
                
    def getEG(self):
        return self.EG

    def getIR(self):
        return self.IR
    
    def addEG(self,EG):
        self.EG = EG

    def addIR(self,IR):#
        self.IR = IR
  
    def addGene(self,Gene):
        aux = list(selg.EG)
        aux.append(Gene)
        self.addEG(tuple(aux))



#Construtor para NeuroEvolução
    @classmethod#
    def Neuro_Crom(cls,P_Mut,corda,Ident_Cam):
        Tam_Rede = 0
        for i in range(len(Ident_Cam)-1):
            Tam_Rede+=Ident_Cam[i]*Ident_Cam[i+1]
        Tam_Rede+=sum(Ident_Cam[1:len(Ident_Cam)])
        return cls(Gene.Neuro_Gene(Ident_Cam),Tam_Rede,corda,0,P_Mut)

#Metodo para preencher Cromossomos para Neuroevolução
    @classmethod#
    def preencherC_NG(cls,Cromossomo):
        if(len(Cromossomo.getCorda())==0):
            cord1 = []
            cord2 = []
            for i in range(len(Cromossomo.getG().getIR())-1):
                for j in range(Cromossomo.getG().getIR()[i+1]):
                    cord1.append({"Vt":i,"NR":j,"Peso":randint(-1000,1000)/1000})
                    for z in range(Cromossomo.getG().getIR()[i]):
                        cord2.append({"Mtz":i,"NE":z,"ND":j,"Peso":randint(-1000,1000)/1000})
            
            Cromossomo.corda = cord2 + cord1
        return Cromossomo