def roleta(self):
            Soma_Apt = 0
            Q = 0
            indice = 0
            Prob_Indv = []
            Prob_Acum = []
            self.getPop().sort()
            Aux = self.getSize()-int((self.getEl()/100)*self.getSize())
            for i in range(Aux): Soma_Apt+=(1/abs(self.getPop()[i].getPont()))
            for i in range(Aux): Prob_Indv.append((1/abs(self.getPop()[i].getPont()))/Soma_Apt)
            for Prob in Prob_Indv:
                Prob_Acum.append(Q+Prob)
                Q += Prob
                
            Random_Number = randint(0,10000)/100000
            for i in range(Aux):
                if(Random_Number<=Prob_Acum[i]):
                    indice = i
                    break
            shuffle(self.getPop())
            return indice
            
        #Seleção Adaptada a Neuroevolução
        def selecao(self):
            Mutation = self.getPop()[0].getMut()
            Aux = self.getSize()-int((self.getEl()/100)*self.getSize())
            li1 = list(self.getPop())
            li2 = []
            li1.sort()
            li1 = li1[Aux:self.getSize()]
            for _ in range(int(Aux/2)):
                x = self.getPop()[self.roleta()]
                y = self.getPop()[self.roleta()]
                cx,cy = x.cross(y)
                if(self.getGene().getEG()!=()):
                    Cx = Cromossomo(self.getGene(),self.getMX(),cx)
                    Cy = Cromossomo(self.getGene(),self.getMX(),cy)
                    li2.append(Cx)
                    li2.append(Cy)
                else:#
                    Cx = Cromossomo.Neuro_Crom(Mutation ,cx,self.getGene().IR)
                    Cy = Cromossomo.Neuro_Crom(Mutation,cy,self.getGene().IR)
                    li2.append(Cx)
                    li2.append(Cy)
                
            self.populacao = li1+li2
            shuffle(self.populacao)
            self.setGer(self.getGer()+1)